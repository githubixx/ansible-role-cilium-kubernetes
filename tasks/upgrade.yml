---
- name: Ensure Cilium etcd secrets in k8s
  when:
    - cilium_etcd_enabled is defined
    - cilium_etcd_enabled == "true"
    - cilium_etcd_secrets_name is defined
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'etcd-secrets.yml.j2') }}"
    namespace: "{{ cilium_namespace }}"
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Fetch current Cilium DaemonSet information
  kubernetes.core.k8s_info:
    api_version: v1
    kind: DaemonSet
    name: "{{ cilium_release_name }}"
    namespace: "{{ cilium_namespace }}"
  register: cilium__daemonset
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Register current Cilium pods running
  ansible.builtin.set_fact:
    cilium_pods_running: "{{ cilium__daemonset | to_json | from_json | community.general.json_query(query) }}"
  vars:
    query: "resources[0].status.numberReady"
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Fetch information if there is a Cilium pre-flight check deployment leftover
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Deployment
    name: cilium-pre-flight-check
    namespace: "{{ cilium_namespace }}"
  register: cilium__pre_flight_check_deployment
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Register if there is a Cilium pre-flight check deployment leftover
  ansible.builtin.set_fact:
    cilium_pre_flight_check_leftover: "{{ cilium__pre_flight_check_deployment | to_json | from_json | community.general.json_query(query) }}"
  vars:
    query: "resources[0].metadata.name"
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Delete Cilium pre-flight check leftover
  when:
    - cilium_pre_flight_check_leftover.find("cilium-pre-flight-check") != -1
  kubernetes.core.helm:
    name: "cilium-preflight"
    release_namespace: "{{ cilium_namespace }}"
    state: absent
  changed_when: false
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Give Kubernetes 30 secs to delete Cilium pre-flight check
  when:
    - cilium_pre_flight_check_leftover.find("cilium-pre-flight-check") != -1
  ansible.builtin.wait_for:
    timeout: 30
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Install Cilium pre-flight check
  kubernetes.core.helm:
    name: "cilium-preflight"
    chart_ref: "{{ cilium_chart_name }}"
    chart_version: "{{ cilium_chart_version }}"
    release_namespace: "{{ cilium_namespace }}"
    create_namespace: false
    update_repo_cache: true
    values: "{{ lookup('template', lookup('first_found', params)) | from_yaml }}"
  vars:
    params:
      files:
        - cilium_values_user_pre_flight_check.yml.j2
        - cilium_values_default_pre_flight_check.yml.j2
      paths:
        - templates
  changed_when: false
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"
  register: cilium__helm_pre_flight

- name: Install Cilium pre-flight check (helm command executed)
  when:
    - cilium__helm_pre_flight is defined
    - cilium__helm_pre_flight.command is defined
    - cilium_helm_show_commands
  ansible.builtin.debug:
    var: cilium__helm_pre_flight.command
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Waiting for pre flight check to be deployed
  ansible.builtin.include_tasks:
    file: pre_flight_check.yml

- name: Fetch Cilium pre flight deployment information
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Deployment
    name: cilium-pre-flight-check
    namespace: "{{ cilium_namespace }}"
  register: cilium__pre_flight_deployment
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Register Cilium pre flight ready replicas
  ansible.builtin.set_fact:
    cilium_pre_flight_ready_replicas: "{{ cilium__pre_flight_deployment | to_json | from_json | community.general.json_query(query) }}"
  vars:
    query: "resources[0].status.readyReplicas"
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Register Cilium pre flight replicas
  ansible.builtin.set_fact:
    cilium_pre_flight_replicas: "{{ cilium__pre_flight_deployment | to_json | from_json | community.general.json_query(query) }}"
  vars:
    query: "resources[0].status.replicas"
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Check replica count == ready replicas
  when:
    - cilium_pre_flight_replicas | int != cilium_pre_flight_ready_replicas | int
  ansible.builtin.fail:
    msg: "Replica count ({{ cilium_pre_flight_replicas }}) != ready replicas count ({{ cilium_pre_flight_ready_replicas }})"
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"

- name: Delete Cilium pre flight via Helm
  kubernetes.core.helm:
    name: "cilium-preflight"
    release_namespace: "{{ cilium_namespace }}"
    state: absent
  changed_when: false
  run_once: true
  delegate_to: "{{ cilium_delegate_to }}"
  register: cilium__helm_pre_flight_chart

- name: Delete Cilium pre flight via Helm (helm command executed)
  when:
    - cilium__helm_pre_flight_chart is defined
    - cilium__helm_pre_flight_chart.command is defined
    - cilium_helm_show_commands
  ansible.builtin.debug:
    var: cilium__helm_pre_flight_chart.command
  delegate_to: "{{ cilium_delegate_to }}"
  run_once: true

- name: Upgrade Cilium via Helm
  block:
    - name: Create temporary file for Helm values
      ansible.builtin.tempfile:
        state: file
        suffix: cilium_values
      run_once: true
      delegate_to: "{{ cilium_delegate_to }}"
      register: cilium__values_tmp_file

    - name: Select values file for Helm template
      ansible.builtin.template:
        src: "{{ lookup('first_found', params) }}"
        dest: "{{ cilium__values_tmp_file.path }}"
        mode: 0600
      run_once: true
      delegate_to: "{{ cilium_delegate_to }}"
      vars:
        params:
          files:
            - values.yml.j2
            - values.yaml.j2
            - cilium_values_user.yml.j2
            - cilium_values_default.yml.j2
          paths:
            - "{{ cilium_chart_values_directory }}"
            - templates

    - name: Upgrade Helm chart
      kubernetes.core.helm:
        name: "{{ cilium_release_name }}"
        chart_ref: "{{ cilium_chart_name }}"
        chart_version: "{{ cilium_chart_version }}"
        release_namespace: "{{ cilium_namespace }}"
        force: true
        create_namespace: false
        update_repo_cache: true
        values_files:
          - "{{ cilium__values_tmp_file.path }}"
      run_once: true
      delegate_to: "{{ cilium_delegate_to }}"
      register: cilium__helm_upgrade_chart

    - name: Upgrade Helm chart (helm command executed)
      when:
        - cilium__helm_upgrade_chart is defined
        - cilium__helm_upgrade_chart.command is defined
        - cilium_helm_show_commands
      ansible.builtin.debug:
        var: cilium__helm_upgrade_chart.command
      changed_when: false
      run_once: true
      delegate_to: "{{ cilium_delegate_to }}"

    - name: Delete temporary file for Helm values
      when:
        - cilium__values_tmp_file.path is defined
      ansible.builtin.file:
        path: "{{ cilium__values_tmp_file.path }}"
        state: absent
      changed_when: false
      run_once: true
      delegate_to: "{{ cilium_delegate_to }}"

  rescue:
    - name: Delete temporary file for Helm values
      when:
        - cilium__values_tmp_file.path is defined
      ansible.builtin.file:
        path: "{{ cilium__values_tmp_file.path }}"
        state: absent
      run_once: true
      delegate_to: "{{ cilium_delegate_to }}"
      changed_when: false
